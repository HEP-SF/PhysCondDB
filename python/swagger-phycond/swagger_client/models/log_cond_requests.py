# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class LogCondRequests(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LogCondRequests - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'user_name': 'str',
            'user_role': 'str',
            'server_host': 'str',
            'remote_host': 'str',
            'request_url': 'str',
            'request_header': 'str',
            'http_method': 'str',
            'start': 'datetime',
            'end': 'datetime',
            'insertion_time': 'datetime',
            'length_milli': 'int',
            'href': 'str',
            'res_id': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'user_name': 'userName',
            'user_role': 'userRole',
            'server_host': 'serverHost',
            'remote_host': 'remoteHost',
            'request_url': 'requestUrl',
            'request_header': 'requestHeader',
            'http_method': 'httpMethod',
            'start': 'start',
            'end': 'end',
            'insertion_time': 'insertionTime',
            'length_milli': 'lengthMilli',
            'href': 'href',
            'res_id': 'resId'
        }

        self._id = None
        self._user_name = None
        self._user_role = None
        self._server_host = None
        self._remote_host = None
        self._request_url = None
        self._request_header = None
        self._http_method = None
        self._start = None
        self._end = None
        self._insertion_time = None
        self._length_milli = None
        self._href = None
        self._res_id = None

    @property
    def id(self):
        """
        Gets the id of this LogCondRequests.


        :return: The id of this LogCondRequests.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LogCondRequests.


        :param id: The id of this LogCondRequests.
        :type: int
        """
        self._id = id

    @property
    def user_name(self):
        """
        Gets the user_name of this LogCondRequests.


        :return: The user_name of this LogCondRequests.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this LogCondRequests.


        :param user_name: The user_name of this LogCondRequests.
        :type: str
        """
        self._user_name = user_name

    @property
    def user_role(self):
        """
        Gets the user_role of this LogCondRequests.


        :return: The user_role of this LogCondRequests.
        :rtype: str
        """
        return self._user_role

    @user_role.setter
    def user_role(self, user_role):
        """
        Sets the user_role of this LogCondRequests.


        :param user_role: The user_role of this LogCondRequests.
        :type: str
        """
        self._user_role = user_role

    @property
    def server_host(self):
        """
        Gets the server_host of this LogCondRequests.


        :return: The server_host of this LogCondRequests.
        :rtype: str
        """
        return self._server_host

    @server_host.setter
    def server_host(self, server_host):
        """
        Sets the server_host of this LogCondRequests.


        :param server_host: The server_host of this LogCondRequests.
        :type: str
        """
        self._server_host = server_host

    @property
    def remote_host(self):
        """
        Gets the remote_host of this LogCondRequests.


        :return: The remote_host of this LogCondRequests.
        :rtype: str
        """
        return self._remote_host

    @remote_host.setter
    def remote_host(self, remote_host):
        """
        Sets the remote_host of this LogCondRequests.


        :param remote_host: The remote_host of this LogCondRequests.
        :type: str
        """
        self._remote_host = remote_host

    @property
    def request_url(self):
        """
        Gets the request_url of this LogCondRequests.


        :return: The request_url of this LogCondRequests.
        :rtype: str
        """
        return self._request_url

    @request_url.setter
    def request_url(self, request_url):
        """
        Sets the request_url of this LogCondRequests.


        :param request_url: The request_url of this LogCondRequests.
        :type: str
        """
        self._request_url = request_url

    @property
    def request_header(self):
        """
        Gets the request_header of this LogCondRequests.


        :return: The request_header of this LogCondRequests.
        :rtype: str
        """
        return self._request_header

    @request_header.setter
    def request_header(self, request_header):
        """
        Sets the request_header of this LogCondRequests.


        :param request_header: The request_header of this LogCondRequests.
        :type: str
        """
        self._request_header = request_header

    @property
    def http_method(self):
        """
        Gets the http_method of this LogCondRequests.


        :return: The http_method of this LogCondRequests.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """
        Sets the http_method of this LogCondRequests.


        :param http_method: The http_method of this LogCondRequests.
        :type: str
        """
        self._http_method = http_method

    @property
    def start(self):
        """
        Gets the start of this LogCondRequests.


        :return: The start of this LogCondRequests.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this LogCondRequests.


        :param start: The start of this LogCondRequests.
        :type: datetime
        """
        self._start = start

    @property
    def end(self):
        """
        Gets the end of this LogCondRequests.


        :return: The end of this LogCondRequests.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this LogCondRequests.


        :param end: The end of this LogCondRequests.
        :type: datetime
        """
        self._end = end

    @property
    def insertion_time(self):
        """
        Gets the insertion_time of this LogCondRequests.


        :return: The insertion_time of this LogCondRequests.
        :rtype: datetime
        """
        return self._insertion_time

    @insertion_time.setter
    def insertion_time(self, insertion_time):
        """
        Sets the insertion_time of this LogCondRequests.


        :param insertion_time: The insertion_time of this LogCondRequests.
        :type: datetime
        """
        self._insertion_time = insertion_time

    @property
    def length_milli(self):
        """
        Gets the length_milli of this LogCondRequests.


        :return: The length_milli of this LogCondRequests.
        :rtype: int
        """
        return self._length_milli

    @length_milli.setter
    def length_milli(self, length_milli):
        """
        Sets the length_milli of this LogCondRequests.


        :param length_milli: The length_milli of this LogCondRequests.
        :type: int
        """
        self._length_milli = length_milli

    @property
    def href(self):
        """
        Gets the href of this LogCondRequests.


        :return: The href of this LogCondRequests.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this LogCondRequests.


        :param href: The href of this LogCondRequests.
        :type: str
        """
        self._href = href

    @property
    def res_id(self):
        """
        Gets the res_id of this LogCondRequests.


        :return: The res_id of this LogCondRequests.
        :rtype: str
        """
        return self._res_id

    @res_id.setter
    def res_id(self, res_id):
        """
        Sets the res_id of this LogCondRequests.


        :param res_id: The res_id of this LogCondRequests.
        :type: str
        """
        self._res_id = res_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
