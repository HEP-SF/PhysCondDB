# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Iov(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Iov - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'since': 'float',
            'since_string': 'str',
            'insertion_time': 'datetime',
            'payload': 'Payload',
            'tag': 'Tag',
            'hash': 'str',
            'href': 'str',
            'res_id': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'since': 'since',
            'since_string': 'sinceString',
            'insertion_time': 'insertionTime',
            'payload': 'payload',
            'tag': 'tag',
            'hash': 'hash',
            'href': 'href',
            'res_id': 'resId'
        }

        self._id = None
        self._since = None
        self._since_string = None
        self._insertion_time = None
        self._payload = None
        self._tag = None
        self._hash = None
        self._href = None
        self._res_id = None

    @property
    def id(self):
        """
        Gets the id of this Iov.


        :return: The id of this Iov.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Iov.


        :param id: The id of this Iov.
        :type: int
        """
        self._id = id

    @property
    def since(self):
        """
        Gets the since of this Iov.


        :return: The since of this Iov.
        :rtype: float
        """
        return self._since

    @since.setter
    def since(self, since):
        """
        Sets the since of this Iov.


        :param since: The since of this Iov.
        :type: float
        """
        self._since = since

    @property
    def since_string(self):
        """
        Gets the since_string of this Iov.


        :return: The since_string of this Iov.
        :rtype: str
        """
        return self._since_string

    @since_string.setter
    def since_string(self, since_string):
        """
        Sets the since_string of this Iov.


        :param since_string: The since_string of this Iov.
        :type: str
        """
        self._since_string = since_string

    @property
    def insertion_time(self):
        """
        Gets the insertion_time of this Iov.


        :return: The insertion_time of this Iov.
        :rtype: datetime
        """
        return self._insertion_time

    @insertion_time.setter
    def insertion_time(self, insertion_time):
        """
        Sets the insertion_time of this Iov.


        :param insertion_time: The insertion_time of this Iov.
        :type: datetime
        """
        self._insertion_time = insertion_time

    @property
    def payload(self):
        """
        Gets the payload of this Iov.


        :return: The payload of this Iov.
        :rtype: Payload
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """
        Sets the payload of this Iov.


        :param payload: The payload of this Iov.
        :type: Payload
        """
        self._payload = payload

    @property
    def tag(self):
        """
        Gets the tag of this Iov.


        :return: The tag of this Iov.
        :rtype: Tag
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this Iov.


        :param tag: The tag of this Iov.
        :type: Tag
        """
        self._tag = tag

    @property
    def hash(self):
        """
        Gets the hash of this Iov.


        :return: The hash of this Iov.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this Iov.


        :param hash: The hash of this Iov.
        :type: str
        """
        self._hash = hash

    @property
    def href(self):
        """
        Gets the href of this Iov.


        :return: The href of this Iov.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this Iov.


        :param href: The href of this Iov.
        :type: str
        """
        self._href = href

    @property
    def res_id(self):
        """
        Gets the res_id of this Iov.


        :return: The res_id of this Iov.
        :rtype: str
        """
        return self._res_id

    @res_id.setter
    def res_id(self, res_id):
        """
        Sets the res_id of this Iov.


        :param res_id: The res_id of this Iov.
        :type: str
        """
        self._res_id = res_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
