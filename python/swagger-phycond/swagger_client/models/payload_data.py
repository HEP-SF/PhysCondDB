# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PayloadData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PayloadData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'hash': 'str',
            'data': 'Blob',
            'uri': 'str',
            'href': 'str',
            'res_id': 'str'
        }

        self.attribute_map = {
            'hash': 'hash',
            'data': 'data',
            'uri': 'uri',
            'href': 'href',
            'res_id': 'resId'
        }

        self._hash = None
        self._data = None
        self._uri = None
        self._href = None
        self._res_id = None

    @property
    def hash(self):
        """
        Gets the hash of this PayloadData.


        :return: The hash of this PayloadData.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this PayloadData.


        :param hash: The hash of this PayloadData.
        :type: str
        """
        self._hash = hash

    @property
    def data(self):
        """
        Gets the data of this PayloadData.


        :return: The data of this PayloadData.
        :rtype: Blob
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this PayloadData.


        :param data: The data of this PayloadData.
        :type: Blob
        """
        self._data = data

    @property
    def uri(self):
        """
        Gets the uri of this PayloadData.


        :return: The uri of this PayloadData.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this PayloadData.


        :param uri: The uri of this PayloadData.
        :type: str
        """
        self._uri = uri

    @property
    def href(self):
        """
        Gets the href of this PayloadData.


        :return: The href of this PayloadData.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this PayloadData.


        :param href: The href of this PayloadData.
        :type: str
        """
        self._href = href

    @property
    def res_id(self):
        """
        Gets the res_id of this PayloadData.


        :return: The res_id of this PayloadData.
        :rtype: str
        """
        return self._res_id

    @res_id.setter
    def res_id(self, res_id):
        """
        Sets the res_id of this PayloadData.


        :param res_id: The res_id of this PayloadData.
        :type: str
        """
        self._res_id = res_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
