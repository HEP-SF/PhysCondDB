# coding: utf-8

"""
TagsApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TagsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def list_tags(self, by, **kwargs):
        """
        List Tags
        Provide the <by> parameter to filter the list using comma separated list of conditions. The syntax is : by=<param-name><operation><param-value>       <param-name> is the name of one of the fields returned in the output json       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. Set the page number and page size parameters to use pagination.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_tags(by, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str by: by (required)
        :param int page: page: the page number {0}
        :param int size: size: the page size {1000}
        :param bool expand: expand {true|false} is for parameter expansion
        :return: SwaggerTagCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['by', 'page', 'size', 'expand']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_tags" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'by' is set
        if ('by' not in params) or (params['by'] is None):
            raise ValueError("Missing the required parameter `by` when calling `list_tags`")

        resource_path = '/tags'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'expand' in params:
            query_params['expand'] = params['expand']
        if 'by' in params:
            query_params['by'] = params['by']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SwaggerTagCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def find_tag(self, name, **kwargs):
        """
        Finds a Tag by name
        This method will search for a tag with the given name. Only one tag should be returned.Set <trace> parameter to (de)activate tracing, i.e. the retrieval of the associated global tags.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_tag(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: name of the tag (required)
        :param str trace: trace {off|on} allows to retrieve associated global tags
        :param bool expand: expand {true|false} is for parameter expansion
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'trace', 'expand']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_tag" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `find_tag`")

        resource_path = '/tags/{name}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}
        if 'trace' in params:
            query_params['trace'] = params['trace']
        if 'expand' in params:
            query_params['expand'] = params['expand']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Tag',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
