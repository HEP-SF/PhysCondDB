# coding: utf-8

"""
IovsApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class IovsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def list_iovs(self, by, **kwargs):
        """
        Finds all Iovs
        Usage of this method is essentially for test purposes.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_iovs(by, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str by: by (required)
        :param int page: page: the page number {0}
        :param int size: size: the page size {1000}
        :param bool expand: expand {true|false} is for parameter expansion
        :return: SwaggerIovCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['by', 'page', 'size', 'expand']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_iovs" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'by' is set
        if ('by' not in params) or (params['by'] is None):
            raise ValueError("Missing the required parameter `by` when calling `list_iovs`")

        resource_path = '/iovs'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'expand' in params:
            query_params['expand'] = params['expand']
        if 'by' in params:
            query_params['by'] = params['by']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SwaggerIovCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_iovs_in_tag(self, tag, **kwargs):
        """
        Finds Iovs for a given tag using a specific globaltag for snapshotTime
        This function takes parameters in input like the time range and pagination

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_iovs_in_tag(tag, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tag: tag: the tagname (required)
        :param str globaltag: globaltag: the globaltag name
        :param int snapshot: snapshot: the snapshot time
        :param bool expand: expand {true|false} is for parameter expansion
        :param bool payload: payload {true|false} is for payload fetching
        :param int last: last: {niovs} loads only the last N iovs
        :param str since: since: the string representing since time
        :param str until: until: the string representing until time
        :param int page: page: the page number
        :param int size: size: the page size
        :return: SwaggerIovCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag', 'globaltag', 'snapshot', 'expand', 'payload', 'last', 'since', 'until', 'page', 'size']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_iovs_in_tag" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'tag' is set
        if ('tag' not in params) or (params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `get_iovs_in_tag`")

        resource_path = '/iovs/find'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'globaltag' in params:
            query_params['globaltag'] = params['globaltag']
        if 'snapshot' in params:
            query_params['snapshot'] = params['snapshot']
        if 'expand' in params:
            query_params['expand'] = params['expand']
        if 'payload' in params:
            query_params['payload'] = params['payload']
        if 'last' in params:
            query_params['last'] = params['last']
        if 'since' in params:
            query_params['since'] = params['since']
        if 'until' in params:
            query_params['until'] = params['until']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SwaggerIovCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_iov_groups(self, tagname, **kwargs):
        """
        Finds IovGroups
        Usage of this method is essentially for test purposes.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_iov_groups(tagname, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name (required)
        :return: list[IovGroups]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagname']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_iov_groups" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'tagname' is set
        if ('tagname' not in params) or (params['tagname'] is None):
            raise ValueError("Missing the required parameter `tagname` when calling `list_iov_groups`")

        resource_path = '/iovs/groups/{tagname}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'tagname' in params:
            path_params['tagname'] = params['tagname']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[IovGroups]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_iovs_by_tag(self, tagname, **kwargs):
        """
        Finds all Iovs inside a tag
        Usage of this method is essentially for href links.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_iovs_by_tag(tagname, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name (required)
        :param int page: page: the page number
        :param int size: size: the page size
        :return: SwaggerIovCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagname', 'page', 'size']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_iovs_by_tag" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'tagname' is set
        if ('tagname' not in params) or (params['tagname'] is None):
            raise ValueError("Missing the required parameter `tagname` when calling `get_iovs_by_tag`")

        resource_path = '/iovs/list/{tagname}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'tagname' in params:
            path_params['tagname'] = params['tagname']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SwaggerIovCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_iov_by_id(self, id, **kwargs):
        """
        Finds Iovs by id
        Usage of this method is essentially for href links.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_iov_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: id: the iovid (required)
        :return: Iov
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_iov_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_iov_by_id`")

        resource_path = '/iovs/{id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Iov',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
