# coding: utf-8

"""
ExpertcalibrationApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ExpertcalibrationApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def collect(self, destgtag, packagetag, **kwargs):
        """
        Collect a global tag, works only for ASG global tags.
        This is an utility method.The response object is the global tag.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collect(destgtag, packagetag, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str destgtag: destination global tag name (required)
        :param str packagetag: global tag name for the package to be merged (required)
        :return: GlobalTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destgtag', 'packagetag']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collect" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'destgtag' is set
        if ('destgtag' not in params) or (params['destgtag'] is None):
            raise ValueError("Missing the required parameter `destgtag` when calling `collect`")
        # verify the required parameter 'packagetag' is set
        if ('packagetag' not in params) or (params['packagetag'] is None):
            raise ValueError("Missing the required parameter `packagetag` when calling `collect`")

        resource_path = '/expert/calibration/collect'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}
        if 'destgtag' in params:
            query_params['destgtag'] = params['destgtag']
        if 'packagetag' in params:
            query_params['packagetag'] = params['packagetag']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GlobalTag',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def commit_file(self, package, path, file, **kwargs):
        """
        Commit a new file for a given package.
        This method uploads a form containing informations for storing a new file in the DB.Parameter 'package', 'path' and 'file' are mandatory, while it is optional to insert a since time (default is 0).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commit_file(package, path, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package: name of the package (required)
        :param str path: path where to store the file (required)
        :param file file: filename of the file to be uploaded (required)
        :param float since: since time (default=0)
        :param str description: since time string representation (default=t0)
        :return: Iov
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package', 'path', 'file', 'since', 'description']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commit_file" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'package' is set
        if ('package' not in params) or (params['package'] is None):
            raise ValueError("Missing the required parameter `package` when calling `commit_file`")
        # verify the required parameter 'path' is set
        if ('path' not in params) or (params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `commit_file`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `commit_file`")

        resource_path = '/expert/calibration/commit'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'package' in params:
            form_params['package'] = params['package']
        if 'path' in params:
            form_params['path'] = params['path']
        if 'since' in params:
            form_params['since'] = params['since']
        if 'description' in params:
            form_params['description'] = params['description']
        if 'file' in params:
            files['file'] = params['file']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Iov',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def dump_content(self, id, **kwargs):
        """
        Dump on local disk a global tag directory structure.
        This is an utility method.The response object is the global tag.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dump_content(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: global tag name (required)
        :param str package: package name, optional
        :return: GlobalTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'package']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dump_content" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `dump_content`")

        resource_path = '/expert/calibration/dump/{id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'package' in params:
            query_params['package'] = params['package']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GlobalTag',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def tag_file(self, globaltag, package, **kwargs):
        """
        Tag a package.
        This method will create a global tag for every file created in the given package.The tag name is in general hidden to the user, and is automatically generated by the 'commit' command. The description field is generated, and the global tag will have maximum snapshot time before the locking step.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tag_file(globaltag, package, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str globaltag: global tag name; it should start with package name and have the format xxx-version-subversion (required)
        :param str package: package name (required)
        :return: GlobalTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['globaltag', 'package']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tag_file" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'globaltag' is set
        if ('globaltag' not in params) or (params['globaltag'] is None):
            raise ValueError("Missing the required parameter `globaltag` when calling `tag_file`")
        # verify the required parameter 'package' is set
        if ('package' not in params) or (params['package'] is None):
            raise ValueError("Missing the required parameter `package` when calling `tag_file`")

        resource_path = '/expert/calibration/tag'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}
        if 'globaltag' in params:
            query_params['globaltag'] = params['globaltag']
        if 'package' in params:
            query_params['package'] = params['package']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GlobalTag',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_tar_from_global_tag(self, id, **kwargs):
        """
        Create Tar file from a package global tag.
        This method will create a tar file using the global tag given in input.The tar file is stored locally on disk and provided in the response.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tar_from_global_tag(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: global tag name (required)
        :param str package: package name, optional
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'package']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tar_from_global_tag" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_tar_from_global_tag`")

        resource_path = '/expert/calibration/tar/{id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'package' in params:
            query_params['package'] = params['package']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
