# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class GlobalTag(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        GlobalTag - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'validity': 'float',
            'description': 'str',
            'release': 'str',
            'lockstatus': 'str',
            'insertion_time': 'datetime',
            'snapshot_time': 'datetime',
            'global_tag_maps': 'list[GlobalTagMap]',
            'islocked': 'bool',
            'href': 'str',
            'res_id': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'validity': 'validity',
            'description': 'description',
            'release': 'release',
            'lockstatus': 'lockstatus',
            'insertion_time': 'insertionTime',
            'snapshot_time': 'snapshotTime',
            'global_tag_maps': 'globalTagMaps',
            'islocked': 'islocked',
            'href': 'href',
            'res_id': 'resId'
        }

        self._id = None
        self._name = None
        self._validity = None
        self._description = None
        self._release = None
        self._lockstatus = None
        self._insertion_time = None
        self._snapshot_time = None
        self._global_tag_maps = None
        self._islocked = None
        self._href = None
        self._res_id = None

    @property
    def id(self):
        """
        Gets the id of this GlobalTag.


        :return: The id of this GlobalTag.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GlobalTag.


        :param id: The id of this GlobalTag.
        :type: int
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this GlobalTag.


        :return: The name of this GlobalTag.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GlobalTag.


        :param name: The name of this GlobalTag.
        :type: str
        """
        self._name = name

    @property
    def validity(self):
        """
        Gets the validity of this GlobalTag.


        :return: The validity of this GlobalTag.
        :rtype: float
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """
        Sets the validity of this GlobalTag.


        :param validity: The validity of this GlobalTag.
        :type: float
        """
        self._validity = validity

    @property
    def description(self):
        """
        Gets the description of this GlobalTag.


        :return: The description of this GlobalTag.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GlobalTag.


        :param description: The description of this GlobalTag.
        :type: str
        """
        self._description = description

    @property
    def release(self):
        """
        Gets the release of this GlobalTag.


        :return: The release of this GlobalTag.
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """
        Sets the release of this GlobalTag.


        :param release: The release of this GlobalTag.
        :type: str
        """
        self._release = release

    @property
    def lockstatus(self):
        """
        Gets the lockstatus of this GlobalTag.


        :return: The lockstatus of this GlobalTag.
        :rtype: str
        """
        return self._lockstatus

    @lockstatus.setter
    def lockstatus(self, lockstatus):
        """
        Sets the lockstatus of this GlobalTag.


        :param lockstatus: The lockstatus of this GlobalTag.
        :type: str
        """
        self._lockstatus = lockstatus

    @property
    def insertion_time(self):
        """
        Gets the insertion_time of this GlobalTag.


        :return: The insertion_time of this GlobalTag.
        :rtype: datetime
        """
        return self._insertion_time

    @insertion_time.setter
    def insertion_time(self, insertion_time):
        """
        Sets the insertion_time of this GlobalTag.


        :param insertion_time: The insertion_time of this GlobalTag.
        :type: datetime
        """
        self._insertion_time = insertion_time

    @property
    def snapshot_time(self):
        """
        Gets the snapshot_time of this GlobalTag.


        :return: The snapshot_time of this GlobalTag.
        :rtype: datetime
        """
        return self._snapshot_time

    @snapshot_time.setter
    def snapshot_time(self, snapshot_time):
        """
        Sets the snapshot_time of this GlobalTag.


        :param snapshot_time: The snapshot_time of this GlobalTag.
        :type: datetime
        """
        self._snapshot_time = snapshot_time

    @property
    def global_tag_maps(self):
        """
        Gets the global_tag_maps of this GlobalTag.


        :return: The global_tag_maps of this GlobalTag.
        :rtype: list[GlobalTagMap]
        """
        return self._global_tag_maps

    @global_tag_maps.setter
    def global_tag_maps(self, global_tag_maps):
        """
        Sets the global_tag_maps of this GlobalTag.


        :param global_tag_maps: The global_tag_maps of this GlobalTag.
        :type: list[GlobalTagMap]
        """
        self._global_tag_maps = global_tag_maps

    @property
    def islocked(self):
        """
        Gets the islocked of this GlobalTag.


        :return: The islocked of this GlobalTag.
        :rtype: bool
        """
        return self._islocked

    @islocked.setter
    def islocked(self, islocked):
        """
        Sets the islocked of this GlobalTag.


        :param islocked: The islocked of this GlobalTag.
        :type: bool
        """
        self._islocked = islocked

    @property
    def href(self):
        """
        Gets the href of this GlobalTag.


        :return: The href of this GlobalTag.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this GlobalTag.


        :param href: The href of this GlobalTag.
        :type: str
        """
        self._href = href

    @property
    def res_id(self):
        """
        Gets the res_id of this GlobalTag.


        :return: The res_id of this GlobalTag.
        :rtype: str
        """
        return self._res_id

    @res_id.setter
    def res_id(self, res_id):
        """
        Sets the res_id of this GlobalTag.


        :param res_id: The res_id of this GlobalTag.
        :type: str
        """
        self._res_id = res_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
