# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Payload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Payload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'hash': 'str',
            'version': 'str',
            'object_type': 'str',
            'datasize': 'int',
            'streamer_info': 'str',
            'backend_info': 'str',
            'insertion_time': 'datetime',
            'data': 'PayloadData',
            'iovs': 'list[Iov]',
            'href': 'str',
            'res_id': 'str'
        }

        self.attribute_map = {
            'hash': 'hash',
            'version': 'version',
            'object_type': 'objectType',
            'datasize': 'datasize',
            'streamer_info': 'streamerInfo',
            'backend_info': 'backendInfo',
            'insertion_time': 'insertionTime',
            'data': 'data',
            'iovs': 'iovs',
            'href': 'href',
            'res_id': 'resId'
        }

        self._hash = None
        self._version = None
        self._object_type = None
        self._datasize = None
        self._streamer_info = None
        self._backend_info = None
        self._insertion_time = None
        self._data = None
        self._iovs = None
        self._href = None
        self._res_id = None

    @property
    def hash(self):
        """
        Gets the hash of this Payload.


        :return: The hash of this Payload.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this Payload.


        :param hash: The hash of this Payload.
        :type: str
        """
        self._hash = hash

    @property
    def version(self):
        """
        Gets the version of this Payload.


        :return: The version of this Payload.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Payload.


        :param version: The version of this Payload.
        :type: str
        """
        self._version = version

    @property
    def object_type(self):
        """
        Gets the object_type of this Payload.


        :return: The object_type of this Payload.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this Payload.


        :param object_type: The object_type of this Payload.
        :type: str
        """
        self._object_type = object_type

    @property
    def datasize(self):
        """
        Gets the datasize of this Payload.


        :return: The datasize of this Payload.
        :rtype: int
        """
        return self._datasize

    @datasize.setter
    def datasize(self, datasize):
        """
        Sets the datasize of this Payload.


        :param datasize: The datasize of this Payload.
        :type: int
        """
        self._datasize = datasize

    @property
    def streamer_info(self):
        """
        Gets the streamer_info of this Payload.


        :return: The streamer_info of this Payload.
        :rtype: str
        """
        return self._streamer_info

    @streamer_info.setter
    def streamer_info(self, streamer_info):
        """
        Sets the streamer_info of this Payload.


        :param streamer_info: The streamer_info of this Payload.
        :type: str
        """
        self._streamer_info = streamer_info

    @property
    def backend_info(self):
        """
        Gets the backend_info of this Payload.


        :return: The backend_info of this Payload.
        :rtype: str
        """
        return self._backend_info

    @backend_info.setter
    def backend_info(self, backend_info):
        """
        Sets the backend_info of this Payload.


        :param backend_info: The backend_info of this Payload.
        :type: str
        """
        self._backend_info = backend_info

    @property
    def insertion_time(self):
        """
        Gets the insertion_time of this Payload.


        :return: The insertion_time of this Payload.
        :rtype: datetime
        """
        return self._insertion_time

    @insertion_time.setter
    def insertion_time(self, insertion_time):
        """
        Sets the insertion_time of this Payload.


        :param insertion_time: The insertion_time of this Payload.
        :type: datetime
        """
        self._insertion_time = insertion_time

    @property
    def data(self):
        """
        Gets the data of this Payload.


        :return: The data of this Payload.
        :rtype: PayloadData
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this Payload.


        :param data: The data of this Payload.
        :type: PayloadData
        """
        self._data = data

    @property
    def iovs(self):
        """
        Gets the iovs of this Payload.


        :return: The iovs of this Payload.
        :rtype: list[Iov]
        """
        return self._iovs

    @iovs.setter
    def iovs(self, iovs):
        """
        Sets the iovs of this Payload.


        :param iovs: The iovs of this Payload.
        :type: list[Iov]
        """
        self._iovs = iovs

    @property
    def href(self):
        """
        Gets the href of this Payload.


        :return: The href of this Payload.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this Payload.


        :param href: The href of this Payload.
        :type: str
        """
        self._href = href

    @property
    def res_id(self):
        """
        Gets the res_id of this Payload.


        :return: The res_id of this Payload.
        :rtype: str
        """
        return self._res_id

    @res_id.setter
    def res_id(self, res_id):
        """
        Sets the res_id of this Payload.


        :param res_id: The res_id of this Payload.
        :type: str
        """
        self._res_id = res_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
